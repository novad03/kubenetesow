- name: "get gluster-server ready statuses"
  command: >
    kubectl get pods
    -o jsonpath='{.items[?(@.spec.containers[*].name=="gluster-server")].status.containerStatuses[*].ready}'
  register: get_ready_status

- name: "test gluster-server ready statuses"
  fail:
    msg: "unexpected gluster-server ready status: {{get_ready_status.stdout}}"
  when: not (get_ready_statuses.stdout | match('^(true\s)*true$'))

- name: "get number of ready nodes"
  local_action: >
    shell
    echo {{get_ready_status.stdout}} | wc -w | tr -d " "
  register: get_ready_count

- name: "get number of endpoints"
  shell: >
    kubectl get ep
    -o jsonpath='{@.items[?(@.metadata.name=="gluster-server")].subsets[*].addresses[*].ip}' |
    wc -w | tr -d " "
  register: get_endpoint_count

- name: "retrieve gluster-server pod name"
  shell: >
    kubectl get pods
    -o jsonpath='{.items[?(@.spec.containers[*].name=="gluster-server")].metadata.name}' |
    awk '{print $1;}' | tr -d '\n'
  register: get_gluster_name

- name: "get peer count"
  shell: >
    kubectl exec {{get_gluster_name.stdout}} gluster peer status |
    head -1 | awk '{print $4+1;}'
  register: get_peer_count

- name: "match ready count with node count"
  fail:
    msg: >
      the number of ready glusterfs servers ({{get_ready_count.stdout}})
      doesn't match the number of nodes ({{node_count}})
  when: "{{get_ready_count.stdout | int}} != node_count"

- name: "match endpoint count with node count"
  fail:
    msg: >
      the number of glusterfs endpoints ({{get_endpoint_count.stdout}})
      doesn't match the number of nodes ({{node_count}})
  when: "{{get_endpoint_count.stdout | int}} != node_count"

- name: "match peer count with node count"
  fail:
    msg: >
      the number of glusterfs peers ({{get_peer_count.stdout}})
      doesn't match the number of nodes ({{node_count}})
  when: "{{get_peer_count.stdout | int}} != node_count"
