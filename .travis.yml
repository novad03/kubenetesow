language: python # (Ansible)

sudo: required

branches:
  except:
    - /^experimental\/.*$/
    - /^exp\/.*$/
    - /^development\/.*$/
    - /^dev\/.*$/
    - /^testing\/.*$/
    - /^test\/.*$/
    - /^doc\/.*$/
    - /^docs\/.*$/
    - /^documentation\/.*$/

env:
  global:
    - TERRAFORM_VERSION=0.9.4
    - ANSIBLE_VERSION=2.2.0.0
    - IMAGE_VERSION=v020
    - LIBCLOUD_VERSION=1.5.0
  matrix:
    - HOST_CLOUD=openstack
    - HOST_CLOUD=gce
    - HOST_CLOUD=aws

git:
  submodules: false

before_install:

  # Generate keypair
  - mkdir -p keypair
  - ssh-keygen -q -t rsa -N "" -f keypair/kubenow-ci

  # Add the keypair to the agent
  - eval "$(ssh-agent -s)"
  - ssh-add keypair/kubenow-ci

install:

  # Install Terraform
  - >
      travis_retry curl
      "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
      > /tmp/terraform.zip
  - sudo unzip /tmp/terraform.zip -d /usr/bin
  - sudo chmod +x /usr/bin/terraform

  # Install Ansible and pip deps
  - sudo pip install --upgrade pip
  - >
      sudo pip install
      ansible=="${ANSIBLE_VERSION}"
      j2cli
      dnspython
      jmespath
      backports.ssl_match_hostname
      apache-libcloud=="${LIBCLOUD_VERSION}"
      shade

before_script:

  # Render Terraform configuration
  # Common
  - >
      if [ "$HOST_CLOUD" = 'openstack' ]; then
        cp terraform.tfvars.os-template terraform.tfvars
      else
        cp "terraform.tfvars.${HOST_CLOUD}-template" terraform.tfvars
      fi
  - mkdir -p "$HOME/.ssh/" && cp keypair/kubenow-ci.pub "$HOME/.ssh/id_rsa.pub"
  - sed -i -e "s/your-cluster-prefix/kubenow-ci-${TRAVIS_BUILD_NUMBER}-${HOST_CLOUD}/g" terraform.tfvars
  - sed -i -e "s/your-kubeadm-token/${CI_KUBETOKEN}/g" terraform.tfvars
  - sed -i -e 's/use_cloudflare = "false"/use_cloudflare = "true"/g' terraform.tfvars
  - sed -i -e "s/your-cloudflare-email/${CI_CLOUDFLARE_EMAIL}/g" terraform.tfvars
  - sed -i -e "s/your-cloudflare-token/${CI_CLOUDFLARE_TOKEN}/g" terraform.tfvars
  - sed -i -e "s/your-domain-name/${CI_CLOUDFLARE_DOMAIN}/g" terraform.tfvars

  # AWS
  - sed -i -e "s/your-acces-key-id/${AWS_ACCESS_KEY_ID}/g" terraform.tfvars
  - sed -i -e "s#your-secret-access-key#${AWS_SECRET_ACCESS_KEY}#g" terraform.tfvars
  # GCE
  - printf '%s\n' "$GCE_CREDENTIALS" > "$HOME/account_file.json"
  - sed -i -e "s/your_project_id/${GCE_PROJECT_ID}/g" terraform.tfvars
  # OS
  - sed -i -e "s/your-pool-name/${OS_POOL_NAME}/g" terraform.tfvars
  - sed -i -e "s/external-net-uuid/${OS_EXTERNAL_NET_UUUID}/g" terraform.tfvars
  - sed -i -e "s/your-master-flavor/${OS_MASTER_FLAVOR}/g" terraform.tfvars
  - sed -i -e "s/your-node-flavor/${OS_NODE_FLAVOR}/g" terraform.tfvars
  - sed -i -e "s/your-edge-flavor/${OS_EDGE_FLAVOR}/g" terraform.tfvars

script:
  # AWS doesn't need image import
  - >
      if [ "$HOST_CLOUD" = 'openstack' ] || [ "$HOST_CLOUD" = 'gce' ]; then
        ansible-playbook \
        -e "credentials_file_path=$HOME/account_file.json" \
        playbooks/import-"$HOST_CLOUD"-image.yml
      fi
  - terraform get "$HOST_CLOUD"
  - travis_retry terraform apply "$HOST_CLOUD"
  - ansible-playbook playbooks/install-core.yml
  - ansible-playbook playbooks/infra-test.yml

after_script:
  - travis_retry terraform destroy -force "$HOST_CLOUD"
