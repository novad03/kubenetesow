#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

inventory_master_host="master"

function node_name_from_ip() {
  ip="$1"
  # get kubernetes node-name(host-name) from ip
  jq_filter="jq -r '.items[] | select(.status.addresses[].type == \"InternalIP\" and .status.addresses[].address == \"$ip\") | .metadata.name'"
  filter_cmd="kubectl get nodes -o json | $jq_filter"
  # < /dev/null is needed because otherwise ssh consumes everything from stdin https://stackoverflow.com/questions/13800225
  result=$(kn-ssh "$inventory_master_host" "$filter_cmd" </dev/null)
  echo "$result"
}

function ip_from_target() {
  target="$1"

  # get ip (slightly differen depending on provider
  # openstack
  result=$(terraform state show "$target" | grep -w 'access_ip_v4' | cut -f2 -d '=' | tr -d '[:space:]')
  # aws
  if [[ -z "$result" ]]; then
    result=$(terraform state show "$target" | grep -w 'private_ip' | cut -f2 -d '=' | tr -d '[:space:]')
  fi
  # azure
  if [[ -z "$result" ]]; then
    result=$(terraform state show "$target" | grep -w 'private_ip_address' | cut -f2 -d '=' | tr -d '[:space:]')
  fi
  # gce
  if [[ -z "$result" ]]; then
    result=$(terraform state show "$target" | grep -w 'network_interface.0.address' | cut -f2 -d '=' | tr -d '[:space:]')
  fi
  echo "$result"
}

function drain_and_delete() {
  node_name="$1"
  drain_cmd="kubectl drain $node_name --delete-local-data --force --ignore-daemonsets && kubectl delete node $node_name"
  echo "Execute '$drain_cmd' on master"
  # < /dev/null is needed because otherwise ssh consumes everything from stdin https://stackoverflow.com/questions/13800225
  kn-ssh "$inventory_master_host" "$drain_cmd" </dev/null
}

# Read config file into variable as as json
kn_config=$(json2hcl -reverse <config.tfvars)

# Set variables from json-config
host_cloud=$(jq -r '.provider' <<<"$kn_config")

# Check for recognized cloud provider
if ! grep -qw "$host_cloud" <<<"openstack gce azure aws kvm"; then
  echo >&2 "Error: unrecognized host cloud '$host_cloud' in config file config.tfvars"
  exit 1
fi

# get the planned changes and save them into the file terraform.plan
# shellcheck disable=SC2086
terraform plan $TERRAFORM_OPT -out terraform.plan -var-file=config.tfvars "/KubeNow_root/$host_cloud" &>/dev/null

# get lines that contains objects to be destroyed from the terraform plan output-file
destroy=$(terraform show -no-color terraform.plan | grep '  - module.' || true)

# loop through lines and lookup node-names from terraform targets that are supposed to be destroyed
while read -r line; do

  # get "target" by trimming away "  - " from beginning of lines
  target=$(echo "$line" | cut -f2 -d '-' | tr -d '[:space:]')

  if [[ -n "$target" ]]; then

    # get ip from terraform "target" (if target has no "access_ip_v4" then it is not a node)
    ip=$(ip_from_target "$target")
    # get node name from ip
    node_name=$(node_name_from_ip "$ip")

    # if there is a node to delete - do it in a separate process so many nodes can be done in parallell
    if [[ -n "$node_name" ]]; then
      drain_and_delete "$node_name" &
    fi

  fi

done <<<"$destroy"

# "Wait for all subprocesses to finish"
wait
echo
echo "Now all subprocesses has finished, continuing"
echo
echo "Execute terraform apply"
echo
# shellcheck disable=SC2086
terraform apply $TERRAFORM_OPT terraform.plan
