#!/bin/bash

#Usage
read -r -d '' USAGE << EOM
Usage: kn <command>
Commands:
  help                print this message
  init <DIR>          creates a new project in the supplied directory
  apply <CLOUD>       apply configuration on the supplied cloud provider.
                      CLOUD=<gce|aws|openstack>
  destroy <CLOUD>     destroy deployment (CLOUD=<gce|aws|openstack>)
  kubectl             run kubectl on the master. More help: kn kubectl help
  helm                run helm on the master. More help: kn helm help
  terraform           run Terraform. More help: kn terraform --help
  ansible             run Ansible. More help: kn ansible --help
  ansible-playbook    run an Ansible playbook.
                      More help: kn ansible-playbook --help
  openstack           run a command against you Openstack provider: More help: kn openstack help
  kubetoken           generate and print a kubeadm token
EOM

# Validate command
if [ "$#" -eq 0 ]; then
  >&2 echo "Error: no arguments supplied"
  echo "$USAGE"
  exit 1
fi
COMMAND="$1"
ALLOWED="help init terraform ansible ansible-playbook kubetoken apply destroy kubectl helm openstack"
echo "$ALLOWED" | grep "\b$COMMAND\b" > /dev/null
if [ "$?" = "1" ]; then
  >&2 echo "Error: unrecognized command '$COMMAND'"
  echo "$USAGE"
  exit 1
fi

# Print help if required
if [ "$COMMAND" = "help" ]; then
  echo "$USAGE"
  exit 0
fi

# If no version specified take stable
if [ -z "$KUBENOW_VERSION" ] ; then
  KUBENOW_VERSION="latest"
fi

# Init command
if [ "$COMMAND" = "init" ]; then
  # Validate
  if [ "$#" -ne 2 ]; then
    >&2 echo "Error: wrong number of argument for the init command"
    echo "$USAGE"
    exit 1
  fi
  # shellcheck disable=SC2086,SC2046
  INIT_DIR=$(cd $(dirname $2) && echo $PWD/$(basename $2))
  if [ -f "$INIT_DIR" ] || [ -d "$INIT_DIR" ]; then
    >&2 echo "Error: $INIT_DIR already exists"
    exit 1
  fi
  # Wrap docker run
  mkdir -p "$INIT_DIR"
  docker run --rm -it \
    -v "$INIT_DIR":/var/userdir \
    -e "HOST_USR_UID=$UID" \
    kubenow/provisioners:"$KUBENOW_VERSION" \
    "init-kn"
  exit "$?"
fi

# Validate PWD
if [ "$COMMAND" != "kubetoken" ]; then
  if [ ! -f ssh_key ] || [ ! -f ssh_key.pub ] ; then
      >&2 echo "Error: ssh_key not found. Are you in the right directory?"
      exit 1
  fi
  if [ ! -f terraform.tfvars ] ; then
      >&2 echo "Error: terraform.tfvars not found. Please create one using the templates."
      exit 1
  fi
fi

# Wrap docker run
USR_COMMAND="$*"
docker run --rm -it \
  -v "$PWD":/var/userdir \
  -e "HOST_USR_UID=$UID" \
  -e "TERRAFORM_OPT=$TERRAFORM_OPT" \
  -e "ANSIBLE_OPT=$ANSIBLE_OPT" \
  -e "OS_USERNAME=$OS_USERNAME" \
  -e "OS_PASSWORD=$OS_PASSWORD" \
  -e "OS_AUTH_URL=$OS_AUTH_URL" \
  -e "OS_USER_DOMAIN_ID=$OS_USER_DOMAIN_ID" \
  -e "OS_DOMAIN_ID=$OS_DOMAIN_ID" \
  -e "OS_REGION_NAME=$OS_REGION_NAME" \
  -e "OS_PROJECT_ID=$OS_PROJECT_ID" \
  -e "OS_TENANT_ID=$OS_TENANT_ID" \
  -e "OS_TENANT_NAME=$OS_TENANT_NAME" \
  -e "OS_AUTH_VERSION=$OS_AUTH_VERSION" \
  kubenow/provisioners:"$KUBENOW_VERSION" \
  "$USR_COMMAND"
