#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

function usage
{
    cat <<TEXT_END

Usage: kn <command>
Commands:
  help                 print this message
  init  <CLOUD> <DIR>  creates a new project in the supplied directory
                       CLOUD=<gce|aws|openstack|azure>
  apply [DIR]          apply configuration (the current directory by default)
  destroy [DIR]        destroy deployment (the current directory by default)
  kubectl              run kubectl on the master. More help: kn kubectl help
  helm                 run helm on the master. More help: kn helm help
  terraform            run Terraform. More help: kn terraform --help
  ansible              run Ansible. More help: kn ansible --help
  ansible-playbook     run an Ansible playbook.
                       More help: kn ansible-playbook --help
  openstack            run a command against you Openstack provider: More help: kn openstack help
  kubetoken            generate and print a kubeadm token
  ssh <host>           ssh to <host> defined in ansible inventory file, default <host> is master
  bash                 run an interactive bash promt in the kubenow provisioners docker-image
  az                   run Microsoft Azure CLI: More help: kn az help

TEXT_END
}

# Validate command
if [ "$#" -eq 0 ]; then
  >&2 echo "Error: no arguments supplied"
  usage
  exit 1
fi

COMMAND="$1"
ALLOWED="help init terraform ansible ansible-playbook kubetoken apply destroy kubectl helm openstack az ssh bash"
if ! grep -q "\b$COMMAND\b" <<< "$ALLOWED"; then
  >&2 echo "Error: unrecognized command '$COMMAND'"
  usage
  exit 1
fi

# Print help if required
if [ "$COMMAND" = "help" ]; then
  usage
  exit 0
fi

# If no version specified take stable
if [ -z "$KUBENOW_VERSION" ] ; then
  KUBENOW_VERSION="latest"
fi

echo "Using KubeNow docker-image tag: $KUBENOW_VERSION"

# Set directories to be mounted in docker
USER_DIR="$PWD"
USER_DIR_DOCKER="/var/userdir"

# This is mainly for development where a local

edgfd

if [ -n "$KUBENOW_DIR" ] ; then
  echo "** Using local KubeNow directory: $KUBENOW_DIR **"
else
  KUBENOW_DIR="$USER_DIR"
fi

# Command name replacement
first="$1"; shift; set -- "${first/ssh/ssh-kn}" "$@"
first="$1"; shift; set -- "${first/init/init-kn}" "$@"

# Get all local user group id:s (to be added to user inside docker-image)
LOCAL_GROUP_IDS="$(id -G)"


if [ "$COMMAND" = "version" ]; then
  echo "version, command not implemented yet, exit"
  exit 1
elif [ "$COMMAND" = "upgrade" ]; then
  echo "upgrade, command not implemented yet, exit"
  exit 1
elif [ "$COMMAND" = "init" ]; then
  # Validate
  if [ "$#" -ne 3 ]; then
    >&2 echo "Error: wrong number of argument for the init command"
    usage
    exit 1
  fi

  HOST_CLOUD="$2"
  if [ "$HOST_CLOUD" != 'openstack' ] && \
    [ "$HOST_CLOUD" != 'gce' ] && \
    [ "$HOST_CLOUD" != 'azure' ] && \
    [ "$HOST_CLOUD" != 'aws' ]; then
    >&2 echo "Unrecognized host cloud '$HOST_CLOUD' <hos"
    usage
    exit 1
  fi

  # shellcheck disable=SC2086,SC2046
  INIT_DIR=$(cd $(dirname $3) && echo $PWD/$(basename $3))
  if [ -f "$INIT_DIR" ] || [ -d "$INIT_DIR" ]; then
    >&2 echo "Error: $INIT_DIR already exists"
    exit 1
  fi

  mkdir -p "$INIT_DIR"

  # Wrap docker run
  # shellcheck disable=SC2086
  docker run --rm -it \
    -v "$INIT_DIR":/var/userdir \
    $OPTIONAL_KUBENOW_DIR_MNT \
    -e "LOCAL_USER_ID=$UID" \
    -e "LOCAL_GROUP_IDS=$LOCAL_GROUP_IDS" \
    kubenow/provisioners:"$KUBENOW_VERSION" \
    "$@"
else
  # Validate PWD (not needed for a selection of commands)
  if ! grep -q "\b$COMMAND\b" <<< "kubetoken az bash"; then
    if [ ! -f ssh_key ] || [ ! -f ssh_key.pub ] ; then
        >&2 echo "Error: ssh_key not found. Are you in the right directory?"
        exit 1
    fi
    if [ ! -f terraform.tfvars ] ; then
        >&2 echo "Error: terraform.tfvars not found. Please create one using the templates."
        exit 1
    fi
  fi

  # Wrap docker run
  # shellcheck disable=SC2086
  docker run --rm -it \
    -v "$USER_DIR:$USER_DIR_DOCKER" \
    $OPTIONAL_KUBENOW_DIR_MNT \
    -e "LOCAL_USER_ID=$UID" \
    -e "LOCAL_GROUP_IDS=$LOCAL_GROUP_IDS" \
    -e "TERRAFORM_OPT=$TERRAFORM_OPT" \
    -e "ANSIBLE_OPT=$ANSIBLE_OPT" \
    --env-file <(env | grep OS_) \
    --env-file <(env | grep TF_) \
    --env-file <(env | grep GOOGLE_) \
    --env-file <(env | grep AWS_) \
    --env-file <(env | grep ARM_) \
    --env-file <(env | grep KUBENOW_) \
    kubenow/provisioners:"$KUBENOW_VERSION" \
    "$@"
fi
