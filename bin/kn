#!/bin/bash

set -e # exit at first error

##########################
# Set global vars (from Environment or Default)
##########################
export KN_REPO=${KN_REPO:-'https://github.com/kubenow/KubeNow.git'}
export KN_BRANCH=${KN_BRANCH:-'feature/improved-repo-and-branch-vars'}
export KN_PLUGIN_REPO=${KN_PLUGIN_REPO:-''} # https://github.com/phnmnl/KubeNow-plugin.git
export KN_PLUGIN_REPO_BRANCH=${KN_PLUGIN_REPO_BRANCH:-'master'}
export KN_PLUGIN_NAME=${KN_PLUGIN_NAME:-''} # phnmnl/KubeNow-plugin
export KN_PROVISIONERS_IMG=${KN_PROVISIONERS_IMG:-'kubenow/provisioners:phenomenal-stable'}

#############
# Functions #
#############

function usage() {
  cat <<EOF

Usage: kn [options] <command>

Commands:
basic:
  help                   print this message
  version                print version of this software
  init <CLOUD> <DIR>     creates a new project in the supplied directory
                         CLOUD=<gce|aws|openstack|azure>
  apply                  apply configuration
  destroy                destroy deployment
  provision              apply the provisioner block in the config.tfvars
  scale                  resizes cluster after manual modifications in config.tfvars
  ssh <host>             ssh to <host> defined in ansible inventory file.
                         Default <host> is master
  upgrade <version>      upgrade kn to <latest|latest-stable|master|"tag">
                         Default <version> is the one currently in use
kubernetes:
  kubectl                run kubectl on the master. More help: kn kubectl help
  helm                   run helm on the master. More help: kn helm help
cloud tools:
  terraform              run Terraform. More help: kn terraform --help
  ansible                run Ansible. More help: kn ansible --help
  ansible-playbook       run an Ansible playbook.
                         More help: kn ansible-playbook --help
cloud providers CLI:
  gcloud                 run Google Cloud Platform CLI. More help: kn gcloud help
  openstack              run OpenStack CLI. More help: kn openstack help
  az                     run Microsoft Azure CLI. More help: kn az help
developers:
  bash                   run an interactive bash promt in the provisioners container
  kubetoken              generate and print a kubeadm token
  git                    run git program included in the provisioners image

Options:
  -i,  --docker-image <image>   specifies the provisioners docker image to be used.
  -b,  --branch <branch>        specifies the KubeNow branch to use when initializing deployment
  -p,  --preset <plugin>        specifies a preset plugin to be used
  -r,  --plugin-repo            specifies a plugin repo (e.g. https://github.com/KubeNow/plugin-plain.git)
  -rb, --plugin-repo-branch     specifies a branch on plugin-repo

Environment:
  KN_PROVISIONERS_IMG           Current/Default: "$KN_PROVISIONERS_IMG"
  KN_REPO                       Current/Default: "$KN_REPO"
  KN_BRANCH                     Current/Default: "$KN_BRANCH"
  KN_PLUGIN_REPO                Current/Default: "$KN_PLUGIN_REPO"
  KN_PLUGIN_REPO_BRANCH         Current/Default: "$KN_PLUGIN_REPO_BRANCH"
  KN_PLUGIN_NAME                Current/Default: "$KN_PLUGIN_NAME"

EOF

}

function usage_init() {
  cat <<EOF

Usage: init <CLOUD> <DIR>
CLOUD=<gce|aws|openstack|azure>

EOF
}

function set_vars_from_config_file() {
  # Get var from tfvars-file
  if [ -f config.tfvars ]; then
    KN_PROVISIONERS_IMG=$(grep "^provisioner_image" "config.tfvars" |
      cut -d "=" -f 2- |
      awk -F\" '{print $(NF-1)}')
  fi
}

function docker_run() {
  # parameters
  container=$1
  kubenow_root=$2
  # shellcheck disable=SC2068
  docker run --rm -it \
    -v "$kubenow_root":/KubeNow_root:Z \
    -e "LOCAL_USER_ID=$UID" \
    -e "LOCAL_GROUP_IDS=$(id -G)" \
    -e "TERRAFORM_OPT=$TERRAFORM_OPT" \
    -e "ANSIBLE_OPT=$ANSIBLE_OPT" \
    --env-file <(env | grep OS_) \
    --env-file <(env | grep TF_) \
    --env-file <(env | grep GOOGLE_) \
    --env-file <(env | grep AWS_) \
    --env-file <(env | grep ARM_) \
    --env-file <(env | grep KN_) \
    "$container" \
    "/opt/KubeNow/bin/docker-entrypoint" ${@:3}
}

function validate_pwd() {
  # Make sure that all of the needed files are in place
  if [ ! -f ssh_key ] || [ ! -f ssh_key.pub ]; then
    echo "Error: ssh_key not found. Are you in the right directory?" >&2
    exit 1
  fi
  if [ ! -f config.tfvars ]; then
    echo "Error: config.tfvars not found. Are you in the right directory?" >&2
    exit 1
  fi
  if [ ! -f ansible.cfg ]; then
    echo "Error: ansible.cfg not found. Are you in the right directory?" >&2
    exit 1
  fi
}

function resolve_links() {
  # parameters
  source="$1"
  # resolve $source until the file is no longer a symlink
  while [ -h "$source" ]; do
    dir="$(cd -P "$(dirname "$source")" && pwd)"
    # if $dir was a relative symlink, we need to resolve it relative to
    # the path where the symlink file was located
    source="$(readlink "$source")"
    [[ $dir != /* ]] && dir="$dir/$dir"
  done
  echo "$source"
}

function upgrade() {
  # version is first arg or otherwise default
  version=${1:-$KN_BRANCH}
  echo "upgrade version: $version"
  branch=""
  case "$version" in
  latest)
    branch="$(curl https://api.github.com/repos/kubenow/KubeNow/releases |
      jq -r '.[0].tag_name')"
    ;;
  latest-stable)
    branch="$(curl https://api.github.com/repos/kubenow/KubeNow/releases |
      jq -r '[.[] | select(.prerelease==false) | .tag_name'][0])"
    ;;
  *)
    branch="${version}"
    ;;
  esac

  url="https://raw.githubusercontent.com/kubenow/KubeNow/$branch/bin/kn"

  # Add a random suffix to prevent url caching
  random="$(openssl rand -base64 16)"
  url="$url?rnd=$random"

  # Get full filename of this script
  absolute_file="$(resolve_links "${BASH_SOURCE[0]}")"

  echo "Download new version to /tmp"
  tmpfile=$(mktemp)
  curl -f "$url" -o "$tmpfile" || (
    echo -e "\\nError trying to download file $url" >&2
    echo -e "Are you sure \"$version\" is an available version?\\n" >&2
    exit 1
  )

  # Verify that downloaded temp file is ok by executing kn help
  echo "Verify downloaded file"
  chmod +x "$tmpfile"
  "$tmpfile" help >/dev/null 2>&1 || (
    echo -e "\\nCould not verify functionality of downloaded kn script - skipping upgrade\\n" >&2
    exit 1
  )

  # Copy new file over old (preserves file attr from original file)
  echo "Replace file $absolute_file with downloaded"
  rsync --no-perms --no-owner --no-group "$tmpfile" "$absolute_file" || (
    echo -e "\\nError replacing file: $absolute_file - do you have sudo rights?\\n" >&2
    exit 1
  )

  rm "$tmpfile"

  # Pull latest docker
  echo "Pull provisioners docker image"

  docker pull "$KN_PROVISIONERS_IMG"

  echo -e "\\nUpdated ok to version $KN_PROVISIONERS_IMG\\n"
}


###########
# Options #
###########

# Read vars specified in config file
# then it would try to read even if there is no config-file
#set_vars_from_config_file

# While current command starts with "-" parse options
# in environment variables
while [[ "$1" == -* ]]; do
  option="$1"
  case $option in
  -p | --preset)
    preset="$2"
    echo "Setting preset: $preset"
    source bin/presets "$preset"
    shift # past option
    shift # past value
    ;;

  -i | --docker-image)
    KN_PROVISIONERS_IMG="$2"
    shift # past option
    shift # past value
    ;;

  -b | --branch)
    KN_BRANCH="$2"
    shift # past option
    shift # past value
    ;;

  -r | --plugin-repo)
    KN_PLUGIN_REPO="$2"
    # create plugin name from plugin repo
    KN_PLUGIN_NAME=$(echo "$KN_PLUGIN_REPO" | sed -e 's/.*com\/\(.*\).git/\1/')
    shift # past option
    shift # past value
    ;;

  -rb | --plugin-repo-branch)
    KN_PLUGIN_REPO_BRANCH="$2"
    shift # past option
    shift # past value
    ;;

  *)
    echo "unrecognized option $1" >&2
    usage
    exit 1
    ;;
  esac
done

###############
# Subcommands #
###############

subcommand="$1"
case "$subcommand" in
help)
  usage
  exit
  ;;

version)
  echo "KubeNow version: $KN_BRANCH"
  echo "KubeNow provirioner image: $KN_PROVISIONERS_IMG"
  exit
  ;;

upgrade)

  # shellcheck disable=SC2068
  upgrade ${@:2}
  exit
  ;;

init)
  # Validate
  if [ "$#" -ne 3 ]; then
    echo "Error: wrong number of argument for the init command" >&2
    usage_init
    exit 1
  fi
  # Parse HOST_CLOUD
  host_cloud="$2"
  # Check for recognized cloud provider
  if ! grep -qw "$host_cloud" <<<"openstack gce azure aws"; then
    echo "Error: unrecognized host cloud '$host_cloud'" >&2
    usage_init
    exit 1
  fi
  # Parse INIT_DIR
  # shellcheck disable=SC2086,SC2046
  init_dir=$(cd $(dirname $3) && echo $PWD/$(basename $3))
  if [ -f "$init_dir" ] || [ -d "$init_dir" ]; then
    echo "Error: $init_dir already exists" >&2
    usage_init
    exit 1
  fi

  # Init deployment
  mkdir -p "$init_dir"
  docker_run "$KN_PROVISIONERS_IMG" "$init_dir" "kn-init" "$host_cloud"
  ;;

# Commands that do not need PWD validation
az | openstack | gcloud | bash | git)
  # shellcheck disable=SC2068
  docker_run "$KN_PROVISIONERS_IMG" "$PWD" "$subcommand" ${@:2}
  ;;

# Commands that need PWD validation
terraform | ansible | ansible-playbook)
  validate_pwd
  # shellcheck disable=SC2068
  docker_run "$KN_PROVISIONERS_IMG" "$PWD" "$subcommand" ${@:2}
  ;;

# KubeNow-defined commands that do no need PWD validation
kubetoken)
  # shellcheck disable=SC2068
  docker_run "$KN_PROVISIONERS_IMG" "$PWD" "kn-$subcommand" ${@:2}
  ;;

# KubeNow-defined commands that need PWD validation
apply | destroy | provision | scale | kubectl | helm | ssh)
  validate_pwd
  # get provisioner image from tfvar-file
  set_vars_from_config_file
  echo "Using provisioner version: $KN_PROVISIONERS_IMG"
  # shellcheck disable=SC2068
  docker_run "$KN_PROVISIONERS_IMG" "$PWD" "kn-$subcommand" ${@:2}
  ;;

"")
  echo "No command specified" >&2
  usage
  exit
  ;;

*)
  echo "$1 is not a valid command" >&2
  usage
  exit 1
  ;;

esac
